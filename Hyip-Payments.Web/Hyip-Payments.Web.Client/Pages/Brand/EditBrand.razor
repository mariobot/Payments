@page "/brand/edit/{BrandId:int}"

@inject HttpClient Http

<h3>Edit Brand</h3>

@if (isLoading)
{
    <p>Loading...</p>
}
else if (brand == null)
{
    <p>Brand not found.</p>
}
else
{
    <EditForm Model="brand" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="name" class="form-label">Brand Name</label>
            <InputText id="name" class="form-control" @bind-Value="brand.Name" />
            <ValidationMessage For="@(() => brand.Name)" />
        </div>

        <div class="mb-3">
            <label for="description" class="form-label">Description</label>
            <InputTextArea id="description" class="form-control" @bind-Value="brand.Description" />
            <ValidationMessage For="@(() => brand.Description)" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(message))
    {
        <p>@message</p>
    }
}

@code {
    [Parameter] public int BrandId { get; set; }

    private BrandModel? brand;
    private bool isLoading = true;
    private string? message;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            isLoading = true;
            brand = await Http.GetFromJsonAsync<BrandModel>($"api/brands/{BrandId}");
        }
        catch (Exception ex)
        {
            message = $"An error occurred while loading the brand: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        message = null;

        try
        {
            var response = await Http.PutAsJsonAsync($"api/brands/{BrandId}", brand);

            if (response.IsSuccessStatusCode)
            {
                message = "Brand updated successfully!";
            }
            else
            {
                message = "Failed to update brand. Please try again.";
            }
        }
        catch (Exception ex)
        {
            message = $"An error occurred: {ex.Message}";
        }
    }

    public class BrandModel
    {
        [Required]
        [StringLength(100, ErrorMessage = "Name must be less than 100 characters.")]
        public string Name { get; set; } = string.Empty;

        [StringLength(500, ErrorMessage = "Description must be less than 500 characters.")]
        public string? Description { get; set; }
    }
}
