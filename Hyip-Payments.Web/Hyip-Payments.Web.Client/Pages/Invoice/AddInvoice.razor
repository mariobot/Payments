@page "/invoice/add"
@using Hyip_Payments.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-4">
    <div class="row">
        <div class="col-md-10 offset-md-1">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h3 class="mb-0">Create New Invoice</h3>
                </div>
                <div class="card-body">
                    @if (isSubmitting)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Creating invoice...</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@invoice" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-bold">Invoice Number <span class="text-danger">*</span></label>
                                    <InputText class="form-control" @bind-Value="invoice.InvoiceNumber" placeholder="e.g., INV-2025-001" />
                                    <ValidationMessage For="@(() => invoice.InvoiceNumber)" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-bold">Invoice Date <span class="text-danger">*</span></label>
                                    <InputDate class="form-control" @bind-Value="invoice.InvoiceDate" />
                                    <ValidationMessage For="@(() => invoice.InvoiceDate)" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Description</label>
                                <InputTextArea class="form-control" @bind-Value="invoice.Description" rows="3" placeholder="Enter invoice description..." />
                            </div>

                            <hr class="my-4" />

                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="mb-0">Invoice Items</h5>
                                <button type="button" class="btn btn-success btn-sm" @onclick="AddItem">
                                    <i class="bi bi-plus-circle"></i> Add Item
                                </button>
                            </div>

                            @if (!invoice.Items.Any())
                            {
                                <div class="alert alert-info">
                                    <i class="bi bi-info-circle"></i> No items added yet. Click "Add Item" to start.
                                </div>
                            }
                            else
                            {
                                <div class="table-responsive">
                                    <table class="table table-bordered">
                                        <thead class="table-light">
                                            <tr>
                                                <th>Item Name</th>
                                                <th style="width: 120px;">Quantity</th>
                                                <th style="width: 150px;">Unit Price</th>
                                                <th style="width: 150px;">Total</th>
                                                <th style="width: 80px;">Action</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var (item, index) in invoice.Items.Select((item, idx) => (item, idx)))
                                            {
                                                <tr>
                                                    <td>
                                                        <InputText class="form-control form-control-sm" @bind-Value="item.ItemName" placeholder="Item name" />
                                                    </td>
                                                    <td>
                                                        <InputNumber class="form-control form-control-sm" @bind-Value="item.Quantity" @oninput="@(() => CalculateTotals())" />
                                                    </td>
                                                    <td>
                                                        <InputNumber class="form-control form-control-sm" @bind-Value="item.UnitPrice" @oninput="@(() => CalculateTotals())" />
                                                    </td>
                                                    <td class="text-end">
                                                        <strong>@((item.Quantity * item.UnitPrice).ToString("C"))</strong>
                                                    </td>
                                                    <td class="text-center">
                                                        <button type="button" class="btn btn-danger btn-sm" @onclick="@(() => RemoveItem(item))" title="Remove item">
                                                            <i class="bi bi-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            }
                                        </tbody>
                                        <tfoot>
                                            <tr class="table-secondary">
                                                <td colspan="3" class="text-end fw-bold">Total Amount:</td>
                                                <td class="text-end fw-bold">@invoice.TotalAmount.ToString("C")</td>
                                                <td></td>
                                            </tr>
                                        </tfoot>
                                    </table>
                                </div>
                            }

                            <hr class="my-4" />

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                                <button type="submit" class="btn btn-primary" disabled="@(!invoice.Items.Any())">
                                    <i class="bi bi-check-circle"></i> Create Invoice
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>

            @if (successMessage != null)
            {
                <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                    <i class="bi bi-check-circle-fill"></i> @successMessage
                    <button type="button" class="btn-close" @onclick="@(() => successMessage = null)"></button>
                </div>
            }
            @if (errorMessage != null)
            {
                <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                    <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private InvoiceModel invoice = new InvoiceModel
    {
        InvoiceDate = DateTime.Today,
        Items = new List<InvoiceItemModel>()
    };

    private string? successMessage;
    private string? errorMessage;
    private bool isSubmitting = false;

    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;
        isSubmitting = true;

        try
        {
            // Calculate final total before submission
            CalculateTotals();

            // Validate items
            if (!invoice.Items.Any())
            {
                errorMessage = "Please add at least one item to the invoice.";
                isSubmitting = false;
                return;
            }

            // Validate item details
            var invalidItems = invoice.Items.Where(i => 
                string.IsNullOrWhiteSpace(i.ItemName) || i.Quantity <= 0 || i.UnitPrice <= 0).ToList();
            
            if (invalidItems.Any())
            {
                errorMessage = "All items must have a name, quantity > 0, and unit price > 0.";
                isSubmitting = false;
                return;
            }

            var response = await Http.PostAsJsonAsync("/api/Invoice", invoice);
            
            if (response.IsSuccessStatusCode)
            {
                var createdInvoice = await response.Content.ReadFromJsonAsync<InvoiceModel>();
                successMessage = $"Invoice {invoice.InvoiceNumber} created successfully!";
                
                // Reset form after short delay
                await Task.Delay(2000);
                Navigation.NavigateTo("/invoice/list");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.ReasonPhrase}. {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}. Please check if the API is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void AddItem()
    {
        invoice.Items.Add(new InvoiceItemModel 
        { 
            Quantity = 1,
            UnitPrice = 0
        });
        CalculateTotals();
    }

    private void RemoveItem(InvoiceItemModel item)
    {
        invoice.Items.Remove(item);
        CalculateTotals();
    }

    private void CalculateTotals()
    {
        invoice.TotalAmount = invoice.Items.Sum(i => i.Quantity * i.UnitPrice);
        StateHasChanged();
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/invoice/list");
    }
}
