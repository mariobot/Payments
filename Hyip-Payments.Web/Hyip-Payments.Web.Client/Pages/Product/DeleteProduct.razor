@page "/product/delete/{Id:int}"
@using Hyip_Payments.Models
@inject HttpClient Http
@inject NavigationManager NavigationManager

<h3>Delete Product</h3>

@if (isLoading)
{
    <p>Loading product...</p>
}
else if (successMessage != null)
{
    <div class="alert alert-success">@successMessage</div>
    <button class="btn btn-primary" @onclick="GoToList">Back to Product List</button>
}
else if (errorMessage != null)
{
    <div class="alert alert-danger">@errorMessage</div>
    <button class="btn btn-secondary" @onclick="GoToList">Back to Product List</button>
}
else if (product != null)
{
    <div class="alert alert-warning">
        <h5>Are you sure you want to delete this product?</h5>
        <dl class="row mt-3">
            <dt class="col-sm-3">Name:</dt>
            <dd class="col-sm-9">@product.Name</dd>

            <dt class="col-sm-3">Description:</dt>
            <dd class="col-sm-9">@product.Description</dd>

            <dt class="col-sm-3">Price:</dt>
            <dd class="col-sm-9">@product.Price.ToString("C")</dd>

            <dt class="col-sm-3">Category:</dt>
            <dd class="col-sm-9">@product.Category?.Name</dd>

            <dt class="col-sm-3">Brand:</dt>
            <dd class="col-sm-9">@product.Brand?.Name</dd>

            <dt class="col-sm-3">Active:</dt>
            <dd class="col-sm-9">@(product.IsActive ? "Yes" : "No")</dd>
        </dl>
    </div>
    <button class="btn btn-danger" @onclick="DeleteProduct2">Delete</button>
    <button class="btn btn-secondary ms-2" @onclick="GoToList">Cancel</button>
}

@code {
    [Parameter]
    public int Id { get; set; }

    private ProductModel? product;
    private bool isLoading = true;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            product = await Http.GetFromJsonAsync<ProductModel>($"api/Product/{Id}");
            if (product == null)
            {
                errorMessage = "Product not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading product: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteProduct2()
    {
        isLoading = true;
        successMessage = null;
        errorMessage = null;
        try
        {
            var response = await Http.DeleteAsync($"api/Product/{Id}");
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Product deleted successfully.";
            }
            else
            {
                errorMessage = $"Error: {response.ReasonPhrase}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Exception: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void GoToList()
    {
        NavigationManager.NavigateTo("/product/list");
    }
}
