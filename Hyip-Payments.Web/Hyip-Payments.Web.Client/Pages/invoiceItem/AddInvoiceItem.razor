@page "/invoiceitem/add"
@page "/invoiceitem/add/{InvoiceId:int}"
@using Hyip_Payments.Models
@using System.Net.Http.Json
@inject HttpClient Http
@inject NavigationManager Navigation

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card">
                <div class="card-header bg-success text-white">
                    <h3 class="mb-0">Add Invoice Item</h3>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading invoices...</p>
                        </div>
                    }
                    else if (isSubmitting)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-success" role="status">
                                <span class="visually-hidden">Saving...</span>
                            </div>
                            <p class="mt-2">Adding item...</p>
                        </div>
                    }
                    else
                    {
                        <EditForm Model="@invoiceItem" OnValidSubmit="HandleValidSubmit">
                            <DataAnnotationsValidator />
                            <ValidationSummary class="alert alert-danger" />

                            <div class="mb-3">
                                <label class="form-label fw-bold">Select Invoice <span class="text-danger">*</span></label>
                                <InputSelect class="form-select" @bind-Value="invoiceItem.InvoiceId" disabled="@(InvoiceId.HasValue)">
                                    <option value="0">-- Select an invoice --</option>
                                    @foreach (var invoice in invoices)
                                    {
                                        <option value="@invoice.Id">@invoice.InvoiceNumber - @invoice.InvoiceDate.ToShortDateString() (@invoice.TotalAmount.ToString("C"))</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => invoiceItem.InvoiceId)" />
                            </div>

                            <div class="mb-3">
                                <label class="form-label fw-bold">Item Name <span class="text-danger">*</span></label>
                                <InputText class="form-control" @bind-Value="invoiceItem.ItemName" placeholder="Enter item name..." />
                                <ValidationMessage For="@(() => invoiceItem.ItemName)" />
                            </div>

                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-bold">Quantity <span class="text-danger">*</span></label>
                                    <InputNumber class="form-control" @bind-Value="invoiceItem.Quantity" @oninput="CalculateTotal" />
                                    <ValidationMessage For="@(() => invoiceItem.Quantity)" />
                                </div>
                                <div class="col-md-6 mb-3">
                                    <label class="form-label fw-bold">Unit Price <span class="text-danger">*</span></label>
                                    <InputNumber class="form-control" @bind-Value="invoiceItem.UnitPrice" @oninput="CalculateTotal" />
                                    <ValidationMessage For="@(() => invoiceItem.UnitPrice)" />
                                </div>
                            </div>

                            <div class="mb-3">
                                <div class="alert alert-info">
                                    <strong>Total:</strong> @((invoiceItem.Quantity * invoiceItem.UnitPrice).ToString("C"))
                                </div>
                            </div>

                            <hr class="my-4" />

                            <div class="d-flex justify-content-between">
                                <button type="button" class="btn btn-secondary" @onclick="Cancel">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                                <button type="submit" class="btn btn-success">
                                    <i class="bi bi-plus-circle"></i> Add Item
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>

            @if (successMessage != null)
            {
                <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
                    <i class="bi bi-check-circle-fill"></i> @successMessage
                    <button type="button" class="btn-close" @onclick="@(() => successMessage = null)"></button>
                </div>
            }
            @if (errorMessage != null)
            {
                <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
                    <i class="bi bi-exclamation-triangle-fill"></i> @errorMessage
                    <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
                </div>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int? InvoiceId { get; set; }

    private InvoiceItemModel invoiceItem = new InvoiceItemModel
    {
        Quantity = 1,
        UnitPrice = 0
    };

    private List<InvoiceModel> invoices = new();
    private string? successMessage;
    private string? errorMessage;
    private bool isLoading = true;
    private bool isSubmitting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadInvoices();

        if (InvoiceId.HasValue)
        {
            invoiceItem.InvoiceId = InvoiceId.Value;
        }
    }

    private async Task LoadInvoices()
    {
        isLoading = true;
        try
        {
            var response = await Http.GetAsync("/api/Invoice");
            if (response.IsSuccessStatusCode)
            {
                invoices = await response.Content.ReadFromJsonAsync<List<InvoiceModel>>() ?? new();
            }
            else
            {
                errorMessage = "Failed to load invoices.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading invoices: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleValidSubmit()
    {
        successMessage = null;
        errorMessage = null;
        isSubmitting = true;

        try
        {
            if (invoiceItem.InvoiceId <= 0)
            {
                errorMessage = "Please select an invoice.";
                isSubmitting = false;
                return;
            }

            if (string.IsNullOrWhiteSpace(invoiceItem.ItemName))
            {
                errorMessage = "Item name is required.";
                isSubmitting = false;
                return;
            }

            if (invoiceItem.Quantity <= 0)
            {
                errorMessage = "Quantity must be greater than 0.";
                isSubmitting = false;
                return;
            }

            if (invoiceItem.UnitPrice <= 0)
            {
                errorMessage = "Unit price must be greater than 0.";
                isSubmitting = false;
                return;
            }

            var response = await Http.PostAsJsonAsync("/api/InvoiceItem", invoiceItem);

            if (response.IsSuccessStatusCode)
            {
                var createdItem = await response.Content.ReadFromJsonAsync<InvoiceItemModel>();
                successMessage = $"Item '{invoiceItem.ItemName}' added successfully!";

                // Reset form after short delay
                await Task.Delay(1500);
                Navigation.NavigateTo($"/invoice/edit/{invoiceItem.InvoiceId}");
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                errorMessage = $"Error: {response.ReasonPhrase}. {errorContent}";
            }
        }
        catch (HttpRequestException ex)
        {
            errorMessage = $"Network error: {ex.Message}. Please check if the API is running.";
        }
        catch (Exception ex)
        {
            errorMessage = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void CalculateTotal()
    {
        StateHasChanged();
    }

    private void Cancel()
    {
        if (InvoiceId.HasValue)
        {
            Navigation.NavigateTo($"/invoice/edit/{InvoiceId.Value}");
        }
        else
        {
            Navigation.NavigateTo("/invoice/list");
        }
    }
}
