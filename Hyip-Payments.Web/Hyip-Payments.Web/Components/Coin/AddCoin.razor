@page "/AddCoin"

@using Hyip_Payments.Models
@using Hyip_Payments.Command.CoinCommand
@inject MediatR.IMediator Mediator

<h3>Add Coin</h3>

<EditForm Model="@coin" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Symbol</label>
        <InputText class="form-control" @bind-Value="coin.Symbol" />
        <ValidationMessage For="@(() => coin.Symbol)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Name</label>
        <InputText class="form-control" @bind-Value="coin.Name" />
        <ValidationMessage For="@(() => coin.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Description</label>
        <InputTextArea class="form-control" @bind-Value="coin.Description" />
        <ValidationMessage For="@(() => coin.Description)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Current Price</label>
        <InputNumber class="form-control" @bind-Value="coin.CurrentPrice" />
        <ValidationMessage For="@(() => coin.CurrentPrice)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Network</label>
        <InputText class="form-control" @bind-Value="coin.Network" />
        <ValidationMessage For="@(() => coin.Network)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Coin</button>
</EditForm>

@if (successMessage != null)
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@code {
    private CoinModel coin = new();
    private string? successMessage;

    private async Task HandleValidSubmit()
    {
        var result = await Mediator.Send(new AddCoinCommand(coin));

        successMessage = $"Coin '{result.Name}' added successfully!";
        coin = new(); // Reset form
    }
}
