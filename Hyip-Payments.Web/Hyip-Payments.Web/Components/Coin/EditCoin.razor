@page "/coin/edit/{id:int}"

@using Hyip_Payments.Models
@using Hyip_Payments.Query.CoinQuery
@using Hyip_Payments.Command.CoinCommand
@using MediatR
@inject IMediator Mediator
@inject NavigationManager NavigationManager

<h3>Edit Coin</h3>

@if (isLoading)
{
    <div>Loading coin...</div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}
else if (coin != null)
{
    <EditForm Model="@coin" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Symbol</label>
            <InputText class="form-control" @bind-Value="coin.Symbol" />
            <ValidationMessage For="@(() => coin.Symbol)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Name</label>
            <InputText class="form-control" @bind-Value="coin.Name" />
            <ValidationMessage For="@(() => coin.Name)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Description</label>
            <InputTextArea class="form-control" @bind-Value="coin.Description" />
            <ValidationMessage For="@(() => coin.Description)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Current Price</label>
            <InputNumber class="form-control" @bind-Value="coin.CurrentPrice" />
            <ValidationMessage For="@(() => coin.CurrentPrice)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Network</label>
            <InputText class="form-control" @bind-Value="coin.Network" />
            <ValidationMessage For="@(() => coin.Network)" />
        </div>

        <button type="submit" class="btn btn-primary">Save Changes</button>
        <button type="button" class="btn btn-secondary" @onclick="GoBack">Cancel</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }
}

@code {
    [Parameter]
    public int id { get; set; }

    private CoinModel? coin;
    private string? successMessage;
    private string? errorMessage;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            coin = await Mediator.Send(new GetCointByIdQuery(id));
            if (coin == null)
            {
                errorMessage = "Coin not found.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading coin: {ex.Message}";
        }
        isLoading = false;
    }

    private async Task HandleValidSubmit()
    {
        if (coin == null)
        {
            errorMessage = "No coin loaded.";
            return;
        }

        try
        {
            await Mediator.Send(new EditCoinCommand(coin));
            successMessage = "Coin updated successfully.";
            errorMessage = null;
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating coin: {ex.Message}";
            successMessage = null;
        }
    }

    private void GoBack()
    {
        NavigationManager.NavigateTo("/coin/list");
    }
}
