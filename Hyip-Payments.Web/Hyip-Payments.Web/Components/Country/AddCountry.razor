@page "/AddCountry"

@using Hyip_Payments.Command.CountryCommand
@using Hyip_Payments.Models
@using MediatR
@inject NavigationManager NavigationManager
@inject IMediator Mediator

<h3>Add Country</h3>

<EditForm Model="@country" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label class="form-label">Country Name</label>
        <InputText class="form-control" @bind-Value="country.Name" />
        <ValidationMessage For="@(() => country.Name)" />
    </div>

    <div class="mb-3">
        <label class="form-label">ISO Code</label>
        <InputText class="form-control" @bind-Value="country.IsoCode" />
        <ValidationMessage For="@(() => country.IsoCode)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Capital</label>
        <InputText class="form-control" @bind-Value="country.Capital" />
        <ValidationMessage For="@(() => country.Capital)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Region</label>
        <InputText class="form-control" @bind-Value="country.Region" />
        <ValidationMessage For="@(() => country.Region)" />
    </div>

    <button type="submit" class="btn btn-primary">Add Country</button>
</EditForm>

@if (successMessage != null)
{
    <div class="alert alert-success mt-3">@successMessage</div>
}

@code {
    private CountryModel country = new();
    private string? successMessage;

    private async Task HandleValidSubmit()
    {
        try
        {
            // Use MediatR to send the AddCountryCommand
            var result = await Mediator.Send(new AddCountryCommand(country));
            successMessage = $"Country '{result.Name}' added successfully!";
            country = new();
        }
        catch (Exception ex)
        {
            successMessage = $"Error: {ex.Message}";
        }
    }
}
