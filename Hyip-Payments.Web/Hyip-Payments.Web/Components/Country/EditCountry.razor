@page "/country/update/{id}"

@using Hyip_Payments.Models

<h3>Edit Country</h3>

@if (countries == null)
{
    <div>Loading countries...</div>
}
else
{
    <EditForm Model="@selectedCountry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Select Country</label>
            <InputSelect class="form-select" @bind-Value="selectedCountryId" @onchange="OnCountryChanged">
                <option value="">-- Select Country --</option>
                @foreach (var country in countries)
                {
                    <option value="@country.Id">@country.Name</option>
                }
            </InputSelect>
        </div>

        @if (selectedCountry != null)
        {
            <div class="mb-3">
                <label class="form-label">Country Name</label>
                <InputText class="form-control" @bind-Value="selectedCountry.Name" />
                <ValidationMessage For="@(() => selectedCountry.Name)" />
            </div>

            <div class="mb-3">
                <label class="form-label">ISO Code</label>
                <InputText class="form-control" @bind-Value="selectedCountry.IsoCode" />
                <ValidationMessage For="@(() => selectedCountry.IsoCode)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Capital</label>
                <InputText class="form-control" @bind-Value="selectedCountry.Capital" />
                <ValidationMessage For="@(() => selectedCountry.Capital)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Region</label>
                <InputText class="form-control" @bind-Value="selectedCountry.Region" />
                <ValidationMessage For="@(() => selectedCountry.Region)" />
            </div>

            <button type="submit" class="btn btn-primary">Save Changes</button>
        }
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
}

@code {
    private List<CountryModel>? countries;
    private int? selectedCountryId;
    private CountryModel? selectedCountry;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        countries = await LoadCountriesAsync();
    }

    private async Task OnCountryChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var id))
        {
            selectedCountryId = id;
            selectedCountry = countries?.FirstOrDefault(c => c.Id == id);
            // Optionally, fetch the country from the server for up-to-date data
        }
        else
        {
            selectedCountry = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedCountry == null)
        {
            errorMessage = "No country selected.";
            return;
        }

        try
        {
            // TODO: Replace with your actual update logic/service call
            await UpdateCountryAsync(selectedCountry);

            successMessage = "Country updated successfully.";
            errorMessage = null;
            countries = await LoadCountriesAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating country: {ex.Message}";
            successMessage = null;
        }
    }

    // Placeholder for loading countries
    private Task<List<CountryModel>> LoadCountriesAsync()
    {
        // Replace with actual data fetching logic
        return Task.FromResult(new List<CountryModel>
        {
            new CountryModel { Id = 1, Name = "USA", IsoCode = "USA", Capital = "Washington", Region = "Americas" },
            new CountryModel { Id = 2, Name = "Canada", IsoCode = "CAN", Capital = "Ottawa", Region = "Americas" }
        });
    }

    // Placeholder for updating a country
    private Task UpdateCountryAsync(CountryModel country)
    {
        // Replace with actual update logic
        return Task.CompletedTask;
    }
}
