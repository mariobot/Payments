@page "/country/update/{id:int}"

@using Hyip_Payments.Command.CountryCommand
@using Hyip_Payments.Models
@using MediatR
@inject IMediator Mediator

<h3>Edit Country</h3>

@if (countries == null)
{
    <div>Loading countries...</div>
}
else
{
    <EditForm Model="@selectedCountry" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Select Country</label>
            <InputSelect class="form-select" @bind-Value="selectedCountryId" @onchange="OnCountryChanged">
                <option value="">-- Select Country --</option>
                @foreach (var country in countries)
                {
                    <option value="@country.Id">@country.Name</option>
                }
            </InputSelect>
        </div>

        @if (selectedCountry != null)
        {
            <div class="mb-3">
                <label class="form-label">Country Name</label>
                <InputText class="form-control" @bind-Value="selectedCountry.Name" />
                <ValidationMessage For="@(() => selectedCountry.Name)" />
            </div>

            <div class="mb-3">
                <label class="form-label">ISO Code</label>
                <InputText class="form-control" @bind-Value="selectedCountry.IsoCode" />
                <ValidationMessage For="@(() => selectedCountry.IsoCode)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Capital</label>
                <InputText class="form-control" @bind-Value="selectedCountry.Capital" />
                <ValidationMessage For="@(() => selectedCountry.Capital)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Region</label>
                <InputText class="form-control" @bind-Value="selectedCountry.Region" />
                <ValidationMessage For="@(() => selectedCountry.Region)" />
            </div>

            <button type="submit" class="btn btn-primary">Save Changes</button>
        }
    </EditForm>

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success mt-3">@successMessage</div>
    }
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger mt-3">@errorMessage</div>
    }
}

@code {
    [Parameter]
    public int id { get; set; }

    private List<CountryModel>? countries;
    private int? selectedCountryId;
    private CountryModel? selectedCountry;
    private string? successMessage;
    private string? errorMessage;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            countries = await Mediator.Send(new Hyip_Payments.Query.CountryQuery.GetCountryListQuery());
            // If route parameter is present, select that country
            if (id > 0)
            {
                selectedCountryId = id;
                selectedCountry = await Mediator.Send(new Hyip_Payments.Query.CountryQuery.GetCountryByIdQuery(id));
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading countries: {ex.Message}";
        }
    }

    private async Task OnCountryChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out var countryId))
        {
            selectedCountryId = countryId;
            try
            {
                selectedCountry = await Mediator.Send(new Hyip_Payments.Query.CountryQuery.GetCountryByIdQuery(countryId));
            }
            catch (Exception ex)
            {
                errorMessage = $"Error loading country: {ex.Message}";
                selectedCountry = null;
            }
        }
        else
        {
            selectedCountry = null;
        }
    }

    private async Task HandleValidSubmit()
    {
        if (selectedCountry == null)
        {
            errorMessage = "No country selected.";
            return;
        }

        try
        {
            await Mediator.Send(new EditCountryCommand(selectedCountry));

            successMessage = "Country updated successfully.";
            errorMessage = null;
            countries = await Mediator.Send(new Hyip_Payments.Query.CountryQuery.GetCountryListQuery());
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating country: {ex.Message}";
            successMessage = null;
        }
    }
}
